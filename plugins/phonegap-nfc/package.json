{
  "name": "phonegap-nfc",
  "version": "0.7.1",
  "description": "Near Field Communication (NFC) Plugin. Read and write NDEF messages to NFC tags and share NDEF messages with peers.",
  "cordova": {
    "id": "phonegap-nfc",
    "platforms": [
      "android",
      "wp8",
      "windows",
      "blackberry10",
      "ios"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chariotsolutions/phonegap-nfc.git"
  },
  "keywords": [
    "nfc",
    "ndef",
    "ecosystem:cordova",
    "cordova",
    "cordova-android",
    "cordova-wp8",
    "cordova-windows",
    "cordova-blackberry10",
    "cordova-ios"
  ],
  "author": {
    "name": "Don Coleman",
    "email": "don.coleman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chariotsolutions/phonegap-nfc/issues"
  },
  "homepage": "https://github.com/chariotsolutions/phonegap-nfc#readme",
  "readme": "PhoneGap NFC Plugin\r\n==========================\r\n\r\nThe NFC plugin allows you to read and write  NFC tags. You can also beam to, and receive from, other NFC enabled devices.\r\n\r\nUse to\r\n* read data from NFC tags\r\n* write data to NFC tags\r\n* send data to other NFC enabled devices\r\n* receive data from NFC devices\r\n\r\nThis plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty between NFC devices, tag types, and operating systems.\r\n\r\nSupported Platforms\r\n-------------------\r\n* Android\r\n* [iOS 11](#ios-notes)\r\n* Windows (includes Windows Phone 8.1, Windows 8.1, Windows 10)\r\n* BlackBerry 10\r\n* Windows Phone 8\r\n* BlackBerry 7\r\n\r\n## Contents\r\n\r\n* [Installing](#installing)\r\n* [NFC](#nfc)\r\n* [NDEF](#ndef)\r\n  - [NdefMessage](#ndefmessage)\r\n  - [NdefRecord](#ndefrecord)\r\n* [Events](#events)\r\n* [Platform Differences](#platform-differences)\r\n* [BlackBerry 10 Invoke Target](#blackberry-10-invoke-target)\r\n* [Launching Application when Scanning a Tag](#launching-your-android-application-when-scanning-a-tag)\r\n* [Testing](#testing)\r\n* [Sample Projects](#sample-projects)\r\n* [Host Card Emulation (HCE)](#hce)\r\n* [Book](#book)\r\n* [License](#license)\r\n\r\n# Installing\r\n\r\n### Cordova\r\n\r\n    $ cordova plugin add phonegap-nfc\r\n\r\n### PhoneGap\r\n\r\n    $ phonegap plugin add phonegap-nfc\r\n\r\n### PhoneGap Build\r\n\r\nEdit config.xml to install the plugin for [PhoneGap Build](http://build.phonegap.com).\r\n\r\n    <gap:plugin name=\"phonegap-nfc\" source=\"npm\" />\r\n\r\n\r\nWindows Phone 8.1 should use the **windows** platform. The Silverlight based Windows Phone 8 code is no longer being maintained.\r\n\r\nBlackBerry 7 support is only available for Cordova 2.x. For applications targeting BlackBerry 7, you may need to use an older version of phonegap-nfc.\r\n\r\nSee [Getting Started](https://github.com/chariotsolutions/phonegap-nfc/blob/master/doc/GettingStartedCLI.md) and [Getting Started BlackBerry 10](https://github.com/chariotsolutions/phonegap-nfc/blob/master/doc/GettingStartedBlackberry10.md)for more details.\r\n\r\n## iOS Notes\r\n\r\nReading NFC NDEF tags is supported on iPhone 7 and iPhone 7 Plus running iOS 11. To enable your app to detect NFC tags, the plugin adds the Near Field Communication Tag Reading capability in your Xcode project. You must build your application with XCode 9. See the [Apple Documentation](http://help.apple.com/xcode/mac/current/#/dev88ff319e7) for more info.\r\n\r\nUse [nfc.addNdefListener](#nfcaddndeflistener) to read NDEF NFC tags with iOS. Unfortunately, iOS also requires you to begin a session before scanning NFC tag. The JavaScript API contains two new iOS specific functions [nfc.beginSession](#nfcbeginsession) and [nfc.invalidateSession](#nfcinvalidatesession).\r\n\r\nYou must call [nfc.beginSession](#nfcbeginsession) before every scan. \r\n\r\nThe initial iOS version plugin does not support scanning multiple tags (invalidateAfterFirstRead:FALSE) or setting the alertMessage. If you have use cases or suggestions on the best way to support multi-read or alert messages, open a ticket for discussion.\r\n\r\n# NFC\r\n\r\n> The nfc object provides access to the device's NFC sensor.\r\n\r\n## Methods\r\n\r\n- [nfc.addNdefListener](#nfcaddndeflistener)\r\n- [nfc.removeNdefListener](#nfcremovendeflistener)\r\n- [nfc.addTagDiscoveredListener](#nfcaddtagdiscoveredlistener)\r\n- [nfc.removeTagDiscoveredListener](#nfcremovetagdiscoveredlistener)\r\n- [nfc.addMimeTypeListener](#nfcaddmimetypelistener)\r\n- [nfc.removeMimeTypeListener](#nfcremovemimetypelistener)\r\n- [nfc.addNdefFormatableListener](#nfcaddndefformatablelistener)\r\n- [nfc.write](#nfcwrite)\r\n- [nfc.makeReadOnly](#nfcmakereadonly)\r\n- [nfc.share](#nfcshare)\r\n- [nfc.unshare](#nfcunshare)\r\n- [nfc.erase](#nfcerase)\r\n- [nfc.handover](#nfchandover)\r\n- [nfc.stopHandover](#nfcstophandover)\r\n- [nfc.enabled](#nfcenabled)\r\n- [nfc.showSettings](#nfcshowsettings)\r\n- [nfc.beginSession](#nfcbeginsession)\r\n- [nfc.invalidateSession](#nfcinvalidatesession)\r\n\r\n## nfc.addNdefListener\r\n\r\nRegisters an event listener for any NDEF tag.\r\n\r\n    nfc.addNdefListener(callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __callback__: The callback that is called when an NDEF tag is read.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is added.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.addNdefListener` registers the callback for ndef events.\r\n\r\nA ndef event is fired when a NDEF tag is read.\r\n\r\nFor BlackBerry 10, you must configure the type of tags your application will read with an [invoke-target in config.xml](#blackberry-10-invoke-target).\r\n\r\nOn Android registered [mimeTypeListeners](#nfcaddmimetypelistener) takes precedence over this more generic NDEF listener.\r\n\r\nOn iOS you must call [beingSession](#nfcbeginsession) before scanning a tag.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- iOS\r\n- Windows\r\n- BlackBerry 7\r\n- BlackBerry 10\r\n- Windows Phone 8\r\n\r\n## nfc.removeNdefListener\r\n\r\nRemoves the previously registered event listener for NDEF tags added via `nfc.addNdefListener`.\r\n\r\n    nfc.removeNdefListener(callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __callback__: The previously registered callback.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is successfully removed.\r\n- __onFailure__: (Optional) The callback that is called if there was an error during removal.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- iOS\r\n- Windows\r\n- BlackBerry 7\r\n\r\n## nfc.addTagDiscoveredListener\r\n\r\nRegisters an event listener for tags matching any tag type.\r\n\r\n    nfc.addTagDiscoveredListener(callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __callback__: The callback that is called when a tag is detected.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is added.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.addTagDiscoveredListener` registers the callback for tag events.\r\n\r\nThis event occurs when any tag is detected by the phone.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 7\r\n\r\nNote that Windows Phones need the newere NXP PN427 chipset to read non-NDEF tags. That tag will be read, but no tag meta-data is available.\r\n\r\n## nfc.removeTagDiscoveredListener\r\n\r\nRemoves the previously registered event listener added via `nfc.addTagDiscoveredListener`.\r\n\r\n    nfc.removeTagDiscoveredListener(callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __callback__: The previously registered callback.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is successfully removed.\r\n- __onFailure__: (Optional) The callback that is called if there was an error during removal.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 7\r\n\r\n## nfc.addMimeTypeListener\r\n\r\nRegisters an event listener for NDEF tags matching a specified MIME type.\r\n\r\n    nfc.addMimeTypeListener(mimeType, callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __mimeType__: The MIME type to filter for messages.\r\n- __callback__: The callback that is called when an NDEF tag matching the MIME type is read.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is added.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.addMimeTypeListener` registers the callback for ndef-mime events.\r\n\r\nA ndef-mime event occurs when a `Ndef.TNF_MIME_MEDIA` tag is read and matches the specified MIME type.\r\n\r\nThis function can be called multiple times to register different MIME types. You should use the *same* handler for all MIME messages.\r\n\r\n    nfc.addMimeTypeListener(\"text/json\", *onNfc*, success, failure);\r\n    nfc.addMimeTypeListener(\"text/demo\", *onNfc*, success, failure);\r\n\r\nOn Android, MIME types for filtering should always be lower case. (See [IntentFilter.addDataType()](http://developer.android.com/reference/android/content/IntentFilter.html#addDataType\\(java.lang.String\\)))\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- BlackBerry 7\r\n\r\n## nfc.removeMimeTypeListener\r\n\r\nRemoves the previously registered event listener added via `nfc.addMimeTypeListener`.\r\n\r\n    nfc.removeMimeTypeListener(mimeType, callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __mimeType__: The MIME type to filter for messages.\r\n- __callback__: The previously registered callback.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is successfully removed.\r\n- __onFailure__: (Optional) The callback that is called if there was an error during removal.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- BlackBerry 7\r\n\r\n## nfc.addNdefFormatableListener\r\n\r\nRegisters an event listener for formatable NDEF tags.\r\n\r\n    nfc.addNdefFormatableListener(callback, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __callback__: The callback that is called when NDEF formatable tag is read.\r\n- __onSuccess__: (Optional) The callback that is called when the listener is added.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.addNdefFormatableListener` registers the callback for ndef-formatable events.\r\n\r\nA ndef-formatable event occurs when a tag is read that can be NDEF formatted.  This is not fired for tags that are already formatted as NDEF.  The ndef-formatable event will not contain an NdefMessage.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n\r\n## nfc.write\r\n\r\nWrites an NDEF Message to a NFC tag.\r\n\r\nA NDEF Message is an array of one or more NDEF Records\r\n\r\n    var message = [\r\n        ndef.textRecord(\"hello, world\"),\r\n        ndef.uriRecord(\"http://github.com/chariotsolutions/phonegap-nfc\")\r\n    ];\r\n\r\n    nfc.write(message, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __ndefMessage__: An array of NDEF Records.\r\n- __onSuccess__: (Optional) The callback that is called when the tag is written.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.write` writes an NdefMessage to a NFC tag.\r\n\r\nOn **Android** this method *must* be called from within an NDEF Event Handler.\r\nOn **Windows** this method *may* be called from within the NDEF Event Handler.\r\n\r\nOn **Windows Phone 8.1** this method should be called outside the NDEF Event Handler, otherwise Windows tries to read the tag contents as you are writing to the tag.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 7\r\n- Windows Phone 8\r\n\r\n## nfc.makeReadOnly\r\n\r\nMakes a NFC tag read only.  **Warning this is permanent.**\r\n\r\n    nfc.makeReadOnly([onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __onSuccess__: (Optional) The callback that is called when the tag is locked.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.makeReadOnly` make a NFC tag read only. **Warning this is permanent** and can not be undone.\r\n\r\nOn **Android** this method *must* be called from within an NDEF Event Handler.\r\n\r\nExample usage\r\n\r\n    onNfc: function(nfcEvent) {\r\n\r\n        var record = [\r\n            ndef.textRecord(\"hello, world\")\r\n        ];\r\n\r\n        var failure = function(reason) {\r\n            alert(\"ERROR: \" + reason);\r\n        };\r\n\r\n        var lockSuccess = function() {\r\n            alert(\"Tag is now read only.\");\r\n        };\r\n\r\n        var lock = function() {\r\n            nfc.makeReadOnly(lockSuccess, failure);\r\n        };\r\n\r\n        nfc.write(record, lock, failure);\r\n\r\n    },\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n\r\n## nfc.share\r\n\r\nShares an NDEF Message via peer-to-peer.\r\n\r\nA NDEF Message is an array of one or more NDEF Records\r\n\r\n    var message = [\r\n        ndef.textRecord(\"hello, world\")\r\n    ];\r\n\r\n    nfc.share(message, [onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __ndefMessage__: An array of NDEF Records.\r\n- __onSuccess__: (Optional) The callback that is called when the message is pushed.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.share` writes an NdefMessage via peer-to-peer.  This should appear as an NFC tag to another device.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 7\r\n- BlackBerry 10\r\n- Windows Phone 8\r\n\r\n### Platform differences\r\n\r\n    Android - shares message until unshare is called\r\n    Blackberry 10 - shares the message one time or until unshare is called\r\n    Windows Phone 8 - must be called from within a NFC event handler like nfc.write\r\n\r\n## nfc.unshare\r\n\r\nStop sharing NDEF data via peer-to-peer.\r\n\r\n    nfc.unshare([onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __onSuccess__: (Optional) The callback that is called when sharing stops.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.unshare` stops sharing data via peer-to-peer.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 7\r\n- BlackBerry 10\r\n\r\n## nfc.erase\r\n\r\nErase a NDEF tag\r\n\r\n    nfc.erase([onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __onSuccess__: (Optional) The callback that is called when sharing stops.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.erase` erases a tag by writing an empty message.  Will format unformatted tags before writing.\r\n\r\nThis method *must* be called from within an NDEF Event Handler.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- BlackBerry 7\r\n\r\n## nfc.handover\r\n\r\nSend a file to another device via NFC handover.\r\n\r\n    var uri = \"content://media/external/audio/media/175\";\r\n    nfc.handover(uri, [onSuccess], [onFailure]);\r\n\r\n\r\n    var uris = [\r\n        \"content://media/external/audio/media/175\",\r\n        \"content://media/external/audio/media/176\",\r\n        \"content://media/external/audio/media/348\"\r\n    ];\r\n    nfc.handover(uris, [onSuccess], [onFailure]);\r\n\r\n\r\n### Parameters\r\n\r\n- __uri__: A URI as a String, or an *array* of URIs.\r\n- __onSuccess__: (Optional) The callback that is called when the message is pushed.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.handover` shares files to a NFC peer using handover. Files are sent by specifying a file:// or context:// URI or a list of URIs. The file transfer is initiated with NFC but the transfer is completed with over Bluetooth or WiFi which is handled by a NFC handover request. The Android code is responsible for building the handover NFC Message.\r\n\r\nThis is Android only, but it should be possible to add implementations for other platforms.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n\r\n## nfc.stopHandover\r\n\r\nStop sharing NDEF data via NFC handover.\r\n\r\n    nfc.stopHandover([onSuccess], [onFailure]);\r\n\r\n### Parameters\r\n\r\n- __onSuccess__: (Optional) The callback that is called when sharing stops.\r\n- __onFailure__: (Optional) The callback that is called if there was an error.\r\n\r\n### Description\r\n\r\nFunction `nfc.stopHandover` stops sharing data via peer-to-peer.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n\r\n## nfc.showSettings\r\n\r\nShow the NFC settings on the device.\r\n\r\n    nfc.showSettings(success, failure);\r\n\r\n### Description\r\n\r\nFunction `showSettings` opens the NFC settings for the operating system.\r\n\r\n### Parameters\r\n\r\n- __success__: Success callback function [optional]\r\n- __failure__: Error callback function, invoked when error occurs. [optional]\r\n\r\n### Quick Example\r\n\r\n    nfc.showSettings();\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- Windows\r\n- BlackBerry 10\r\n\r\n## nfc.enabled\r\n\r\nCheck if NFC is available and enabled on this device.\r\n\r\nnfc.enabled(onSuccess, onFailure);\r\n\r\n### Parameters\r\n\r\n- __onSuccess__: The callback that is called when NFC is enabled.\r\n- __onFailure__: The callback that is called when NFC is disabled or missing.\r\n\r\n### Description\r\n\r\nFunction `nfc.enabled` explicitly checks to see if the phone has NFC and if NFC is enabled. If\r\neverything is OK, the success callback is called. If there is a problem, the failure callback\r\nwill be called with a reason code.\r\n\r\nThe reason will be **NO_NFC** if the device doesn't support NFC and **NFC_DISABLED** if the user has disabled NFC.\r\n\r\nNote: that on Android the NFC status is checked before every API call **NO_NFC** or **NFC_DISABLED** can be returned in **any** failure function.\r\n\r\nWindows will return **NO_NFC_OR_NFC_DISABLED** when NFC is not present or disabled. If the user disabled NFC after the application started, Windows may return **NFC_DISABLED**. Windows checks the NFC status before most API calls, but there are some cases when the NFC state can not be determined.\r\n\r\n### Supported Platforms\r\n\r\n- Android\r\n- iOS\r\n- Windows\r\n\r\n## nfc.beginSession\r\n\r\niOS requires you to begin a session before scanning a NFC tag.\r\n\r\n    nfc.beginSession(success, failure);\r\n\r\n### Description\r\n\r\nFunction `beginSession` starts the [NFCNDEFReaderSession](https://developer.apple.com/documentation/corenfc/nfcndefreadersession) allowing iOS to scan NFC tags.\r\n\r\n### Parameters\r\n\r\n- __success__: Success callback function called when the session begins [optional]\r\n- __failure__: Error callback function, invoked when error occurs. [optional]\r\n\r\n### Quick Example\r\n\r\n    nfc.beginSession();\r\n\r\n### Supported Platforms\r\n\r\n- iOS\r\n\r\n## nfc.invalidateSession\r\n\r\nInvalidate the NFC session.\r\n\r\n    nfc.invalidateSession(success, failure);\r\n\r\n### Description\r\n\r\nFunction `invalidateSession` stops the [NFCNDEFReaderSession](https://developer.apple.com/documentation/corenfc/nfcndefreadersession) returning control to your app.\r\n\r\n### Parameters\r\n\r\n- __success__: Success callback function called when the session in invalidated [optional]\r\n- __failure__: Error callback function, invoked when error occurs. [optional]\r\n\r\n### Quick Example\r\n\r\n    nfc.invalidateSession();\r\n\r\n### Supported Platforms\r\n\r\n- iOS\r\n\r\n\r\n# NDEF\r\n\r\n> The `ndef` object provides NDEF constants, functions for creating NdefRecords, and functions for converting data.\r\n> See [android.nfc.NdefRecord](http://developer.android.com/reference/android/nfc/NdefRecord.html) for documentation about constants\r\n\r\n## NdefMessage\r\n\r\nRepresents an NDEF (NFC Data Exchange Format) data message that contains one or more NdefRecords.\r\nThis plugin uses an array of NdefRecords to represent an NdefMessage.\r\n\r\n## NdefRecord\r\n\r\nRepresents a logical (unchunked) NDEF (NFC Data Exchange Format) record.\r\n\r\n### Properties\r\n\r\n- __tnf__: 3-bit TNF (Type Name Format) - use one of the TNF_* constants\r\n- __type__: byte array, containing zero to 255 bytes, must not be null\r\n- __id__: byte array, containing zero to 255 bytes, must not be null\r\n- __payload__: byte array, containing zero to (2 ** 32 - 1) bytes, must not be null\r\n\r\nThe `ndef` object has a function for creating NdefRecords\r\n\r\n    var type = \"text/pg\",\r\n        id = [],\r\n        payload = nfc.stringToBytes(\"Hello World\"),\r\n        record = ndef.record(ndef.TNF_MIME_MEDIA, type, id, payload);\r\n\r\nThere are also helper functions for some types of records\r\n\r\nCreate a URI record\r\n\r\n    var record = ndef.uriRecord(\"http://chariotsolutions.com\");\r\n\r\nCreate a plain text record\r\n\r\n    var record = ndef.textRecord(\"Plain text message\");\r\n\r\nCreate a mime type record\r\n\r\n    var mimeType = \"text/pg\",\r\n        payload = \"Hello Phongap\",\r\n        record = ndef.mimeMediaRecord(mimeType, nfc.stringToBytes(payload));\r\n\r\nCreate an Empty record\r\n\r\n    var record = ndef.emptyRecord();\r\n\r\nCreate an Android Application Record (AAR)\r\n\r\n    var record = ndef.androidApplicationRecord('com.example');\r\n\r\nSee `ndef.record`, `ndef.textRecord`, `ndef.mimeMediaRecord`, and `ndef.uriRecord`.\r\n\r\nThe Ndef object has functions to convert some data types to and from byte arrays.\r\n\r\nSee the [phonegap-nfc.js](https://github.com/chariotsolutions/phonegap-nfc/blob/master/www/phonegap-nfc.js) source for more documentation.\r\n\r\n# Events\r\n\r\nEvents are fired when NFC tags are read.  Listeners are added by registering callback functions with the `nfc` object.  For example ` nfc.addNdefListener(myNfcListener, win, fail);`\r\n\r\n## NfcEvent\r\n\r\n### Properties\r\n\r\n- __type__: event type\r\n- __tag__: Ndef tag\r\n\r\n### Types\r\n\r\n- tag\r\n- ndef-mime\r\n- ndef\r\n- ndef-formatable\r\n\r\nThe tag contents are platform dependent.\r\n\r\n`id` and `techTypes` may be included when scanning a tag on Android.  `serialNumber` may be included on BlackBerry 7.\r\n\r\n`id` and `serialNumber` are different names for the same value.  `id` is typically displayed as a hex string `nfc.bytesToHexString(tag.id)`.\r\n\r\nWindows, Windows Phone 8, and BlackBerry 10 read the NDEF information from a tag, but do not have access to the tag id or other meta data like capacity, read-only status or tag technologies.\r\n\r\nAssuming the following NDEF message is written to a tag, it will produce the following events when read.\r\n\r\n    var ndefMessage = [\r\n        ndef.createMimeRecord('text/pg', 'Hello PhoneGap')\r\n    ];\r\n\r\n#### Sample Event on Android\r\n\r\n    {\r\n        type: 'ndef',\r\n        tag: {\r\n            \"isWritable\": true,\r\n            \"id\": [4, 96, 117, 74, -17, 34, -128],\r\n            \"techTypes\": [\"android.nfc.tech.IsoDep\", \"android.nfc.tech.NfcA\", \"android.nfc.tech.Ndef\"],\r\n            \"type\": \"NFC Forum Type 4\",\r\n            \"canMakeReadOnly\": false,\r\n            \"maxSize\": 2046,\r\n            \"ndefMessage\": [{\r\n                \"id\": [],\r\n                \"type\": [116, 101, 120, 116, 47, 112, 103],\r\n                \"payload\": [72, 101, 108, 108, 111, 32, 80, 104, 111, 110, 101, 71, 97, 112],\r\n                \"tnf\": 2\r\n            }]\r\n        }\r\n    }\r\n\r\n#### Sample Event on BlackBerry 7\r\n\r\n    {\r\n        type: 'ndef',\r\n        tag: {\r\n            \"tagType\": \"4\",\r\n            \"isLocked\": false,\r\n            \"isLockable\": false,\r\n            \"freeSpaceSize\": \"2022\",\r\n            \"serialNumberLength\": \"7\",\r\n            \"serialNumber\": [4, 96, 117, 74, -17, 34, -128],\r\n            \"name\": \"Desfire EV1 2K\",\r\n            \"ndefMessage\": [{\r\n                \"tnf\": 2,\r\n                \"type\": [116, 101, 120, 116, 47, 112, 103],\r\n                \"id\": [],\r\n                \"payload\": [72, 101, 108, 108, 111, 32, 80, 104, 111, 110, 101, 71, 97, 112]\r\n            }]\r\n        }\r\n    }\r\n\r\n#### Sample Event on Windows, BlackBerry 10, or Windows Phone 8\r\n\r\n    {\r\n        type: 'ndef',\r\n        tag: {\r\n            \"ndefMessage\": [{\r\n                \"tnf\": 2,\r\n                \"type\": [116, 101, 120, 116, 47, 112, 103],\r\n                \"id\": [],\r\n                \"payload\": [72, 101, 108, 108, 111, 32, 80, 104, 111, 110, 101, 71, 97, 112]\r\n            }]\r\n        }\r\n    }\r\n\r\n## Getting Details about Events\r\n\r\nThe raw contents of the scanned tags are written to the log before the event is fired.  Use `adb logcat` on Android and Event Log (hold alt + lglg) on BlackBerry.\r\n\r\nYou can also log the tag contents in your event handlers.  `console.log(JSON.stringify(nfcEvent.tag))`  Note that you want to stringify the tag not the event to avoid a circular reference.\r\n\r\n# Platform Differences\r\n\r\n## Non-NDEF Tags\r\n\r\nOnly Android and BlackBerry 7 can read data from non-NDEF NFC tags. Newer Windows Phones with NXP PN427 chipset can read non-NDEF tags, but can not get any tag meta data.\r\n\r\n## Mifare Classic Tags\r\n\r\nBlackBerry 7, BlackBerry 10 and many newer Android phones will not read Mifare Classic tags.  Mifare Ultralight tags will work since they are NFC Forum Type 2 tags. Newer Windows 8.1 phones (Lumia 640) can read Mifare Classic tags.\r\n\r\n## Tag Id and Meta Data\r\n\r\nWindows Phone 8, BlackBerry 10, and Windows read the NDEF information from a tag, but do not have access to the tag id or other meta data like capacity, read-only status or tag technologies.\r\n\r\n## Multiple Listeners\r\n\r\nMultiple listeners can be registered in JavaScript. e.g. addNdefListener, addTagDiscoveredListener, addMimeTypeListener.\r\n\r\nOn Android, only the most specific event will fire.  If a Mime Media Tag is scanned, only the addMimeTypeListener callback is called and not the callback defined in addNdefListener. You can use the same event handler for multiple listeners.\r\n\r\nFor Windows, this plugin mimics the Android behavior. If an ndef event is fired, a tag event will not be fired. You should receive one event per tag.\r\n\r\nOn BlackBerry 7, all the events fire if a Mime Media Tag is scanned.\r\n\r\n## addTagDiscoveredListener\r\n\r\nOn Android, addTagDiscoveredListener scans non-NDEF tags and NDEF tags. The tag event does NOT contain an ndefMessage even if there are NDEF messages on the tag.  Use addNdefListener or addMimeTypeListener to get the NDEF information.\r\n\r\nWindows can scan non-NDEF (unformatted) tags using addTagDiscoveredListener. The tag event will not include any data.\r\n\r\nOn BlackBerry 7, addTagDiscoveredListener does NOT scan non-NDEF tags.  Webworks returns the ndefMessage in the event.\r\n\r\n### Non-NDEF tag scanned with addTagDiscoveredListener on *Android*\r\n\r\n    {\r\n        type: 'tag',\r\n        tag: {\r\n            \"id\": [-81, 105, -4, 64],\r\n            \"techTypes\": [\"android.nfc.tech.MifareClassic\", \"android.nfc.tech.NfcA\", \"android.nfc.tech.NdefFormatable\"]\r\n        }\r\n    }\r\n\r\n\r\n### NDEF tag scanned with addTagDiscoveredListener on *Android*\r\n\r\n    {\r\n        type: 'tag',\r\n        tag: {\r\n            \"id\": [4, 96, 117, 74, -17, 34, -128],\r\n            \"techTypes\": [\"android.nfc.tech.IsoDep\", \"android.nfc.tech.NfcA\", \"android.nfc.tech.Ndef\"]\r\n        }\r\n    }\r\n\r\n### Non-NDEF tag scanned with addTagDiscoveredListener on *Windows*\r\n\r\n    {\r\n        type: 'tag',\r\n        tag: {\r\n        }\r\n    }\r\n\r\n# BlackBerry 10 Invoke Target\r\n\r\nThis plugin uses the [BlackBerry Invocation Framework](http://developer.blackberry.com/native/documentation/cascades/device_platform/invocation/receiving_invocation.html) to read NFC tags on BlackBerry 10. This means that you need to register an invoke target in the config.xml.\r\n\r\nIf your project supports multiple platforms, copy www/config.xml to merges/config.xml and add a `rim:invoke-target` tag. The invoke-target determines which tags your app will scan when it is running. If your application is not running, BlackBerry will launch it when a matching tag is scanned.\r\n\r\nThis sample configuration attempts to open any NDEF tag.\r\n\r\n    <rim:invoke-target id=\"your.unique.id.here\">\r\n        <type>APPLICATION</type>\r\n        <filter>\r\n            <action>bb.action.OPEN</action>\r\n            <mime-type>application/vnd.rim.nfc.ndef</mime-type>\r\n            <!-- any TNF Empty(0), Well Known(1), MIME Media(2), Absolute URI(3), External(4) -->\r\n            <property var=\"uris\" value=\"ndef://0,ndef://1,ndef://2,ndef://3,ndef://4\" />\r\n        </filter>\r\n    </rim:invoke-target>\r\n\r\nYou can configure you application to handle only certain tags.\r\n\r\nFor example to scan only MIME Media tags of type \"text/pg\" use\r\n\r\n    <rim:invoke-target id=\"your.unique.id.here\">\r\n        <type>APPLICATION</type>\r\n        <filter>\r\n            <action>bb.action.OPEN</action>\r\n            <mime-type>application/vnd.rim.nfc.ndef</mime-type>\r\n            <!-- TNF MIME Media(2) with type \"text/pg\" -->\r\n            <property var=\"uris\" value=\"ndef://2/text/pg\" />\r\n        </filter>\r\n    </rim:invoke-target>\r\n\r\nOr to scan only Plain Text tags use\r\n\r\n    <rim:invoke-target id=\"your.unique.id.here\">\r\n        <type>APPLICATION</type>\r\n        <filter>\r\n            <action>bb.action.OPEN</action>\r\n            <mime-type>application/vnd.rim.nfc.ndef</mime-type>\r\n            <!-- TNF Well Known(1), RTD T -->\r\n            <property var=\"uris\" value=\"ndef://1/T\" />\r\n        </filter>\r\n    </rim:invoke-target>\r\n\r\nSee the [BlackBerry documentation](http://developer.blackberry.com/native/documentation/cascades/device_comm/nfc/receiving_content.html) for more info.\r\n\r\n# Launching your Android Application when Scanning a Tag\r\n\r\nOn Android, intents can be used to launch your application when a NFC tag is read.  This is optional and configured in AndroidManifest.xml.\r\n\r\n    <intent-filter>\r\n      <action android:name=\"android.nfc.action.NDEF_DISCOVERED\" />\r\n      <data android:mimeType=\"text/pg\" />\r\n      <category android:name=\"android.intent.category.DEFAULT\" />\r\n    </intent-filter>\r\n\r\nNote: `data android:mimeType=\"text/pg\"` should match the data type you specified in JavaScript\r\n\r\nWe have found it necessary to add `android:noHistory=\"true\"` to the activity element so that scanning a tag launches the application after the user has pressed the home button.\r\n\r\nSee the Android documentation for more information about [filtering for NFC intents](http://developer.android.com/guide/topics/connectivity/nfc/nfc.html#ndef-disc).\r\n\r\nTesting\r\n=======\r\n\r\nTests require the [Cordova Plugin Test Framework](https://github.com/apache/cordova-plugin-test-framework)\r\n\r\nCreate a new project\r\n\r\n    git clone https://github.com/chariotsolutions/phonegap-nfc\r\n    cordova create nfc-test com.example.nfc.test NfcTest\r\n    cd nfc-test\r\n    cordova platform add android\r\n    cordova plugin add ../phonegap-nfc\r\n    cordova plugin add ../phonegap-nfc/tests\r\n    cordova plugin add http://git-wip-us.apache.org/repos/asf/cordova-plugin-test-framework.git\r\n\r\nChange the start page in `config.xml`\r\n\r\n    <content src=\"cdvtests/index.html\" />\r\n\r\nRun the app on your phone\r\n\r\n    cordova run\r\n\r\n\r\nSample Projects\r\n================\r\n\r\n- [Ionic NFC Reader](https://github.com/don/ionic-nfc-reader)\r\n- [NFC Reader](https://github.com/don/phonegap-nfc-reader)\r\n- [NFC Writer](https://github.com/don/phonegap-nfc-writer)\r\n- [NFC Peer to Peer](https://github.com/don/phonegap-p2p)\r\n- [ApacheCon 2014 Demos](https://github.com/don/apachecon-nfc-demos)\r\n- [Rock Paper Scissors](https://github.com/don/rockpaperscissors) *Android 2.x only*\r\n\r\nHCE\r\n=======\r\n\r\nFor Host Card Emulation (HCE), try the [Cordova HCE Plugin](https://github.com/don/cordova-plugin-hce).\r\n\r\nBook\r\n=======\r\nNeed more info? Check out my book <a href=\"http://www.tkqlhce.com/click-7835726-11260198-1430755877000?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920021193.do%3Fcmp%3Daf-prog-books-videos-product_cj_9781449372064_%2525zp&cjsku=0636920021193\" target=\"_top\">\r\nBeginning NFC: Near Field Communication with Arduino, Android, and PhoneGap</a><img src=\"http://www.lduhtrp.net/image-7835726-11260198-1430755877000\" width=\"1\" height=\"1\" border=\"0\"/>\r\n\r\n<a href=\"http://www.kqzyfj.com/click-7835726-11260198-1430755877000?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920021193.do%3Fcmp%3Daf-prog-books-videos-product_cj_9781449372064_%2525zp&cjsku=0636920021193\" target=\"_top\"><img src=\"http://akamaicovers.oreilly.com/images/0636920021193/cat.gif\" border=\"0\" alt=\"Beginning NFC\"/></a><img src=\"http://www.ftjcfx.com/image-7835726-11260198-1430755877000\" width=\"1\" height=\"1\" border=\"0\"/>\r\n\r\nLicense\r\n================\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2011-2017 Chariot Solutions\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "gitHead": "fdba79f489f195c0ff8d8b4e98b2ecb8cb97e8c4",
  "_id": "phonegap-nfc@0.7.1",
  "_shasum": "5ac492d82a7192163071fb5bf63e355f158a5d7c",
  "_from": "git+https://github.com/chariotsolutions/phonegap-nfc.git",
  "_resolved": "git+https://github.com/chariotsolutions/phonegap-nfc.git#fdba79f489f195c0ff8d8b4e98b2ecb8cb97e8c4"
}
